import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collections;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Post_View {
	private User activeUser;
	private int posts_displayed;
	private String displayPlace;
	private Post apost;
	/**
	 * Creates new form PostView
	 */
	public Post_View(User activeUser, String displayPlace) {
		this.activeUser = activeUser;
		this.displayPlace = displayPlace;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents(String header) {//String header contains how the panel will be named
		panel = new JPanel();
		panel.setName(header);
        jScrollPane1 = new javax.swing.JScrollPane();
        postText = new javax.swing.JTextArea();
        likeButton = new javax.swing.JButton();
        commentButton = new javax.swing.JButton();

        postText.setColumns(20);
        postText.setRows(5);
        jScrollPane1.setViewportView(postText);

        likeButton.setText("Like!");
        likeButton.addActionListener(new likeButtonListener());
        
        commentButton.setText("Comment");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(panel);
        panel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(likeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commentButton)
                .addGap(0, 307, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(likeButton)
                    .addComponent(commentButton)))
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify   
	private javax.swing.JPanel panel;
    private javax.swing.JButton commentButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea postText;
    private javax.swing.JButton likeButton;
    // End of variables declaration   
	private Object String;
    
	public Post postToBeDisplayedUser(User activeUser,User anotherUser){

		if(activeUser.isFriend(anotherUser)){								 
			Collections.sort(anotherUser.getPersonalPosts()); //TODO check / Collections.sort refers to List not ArrayList
			return anotherUser.getPersonalPosts().get(posts_displayed++);	
		}
		return null;
	}


	public Post postToBeDisplayedGroup(Group agroup){ 
		if(agroup.isMember(activeUser)){							 
			Collections.sort(agroup.getGroupPosts()); //TODO Collections.sort refers to List not ArrayList
			return agroup.getGroupPosts().get(posts_displayed++);
		}
		return null;
	}
	
	public Post postToBeDisplayedHomePage(User activeUser){
		return null;
	}
	
	
	
	public void displayPost(Post apost){//Post apost will be defined by postToBeDisplayedUser/postToBeDisplayedGroup/postToBeDisplayedHomePage
		this.apost = apost;
		//String header contains how the panel will be named
		String s = "";
		if(apost.getAnotherUser() != null){
			s = (apost.getCreator().toString() + " to " + apost.getAnotherUser().getName()+"'s Timeline");
		}
		else if(apost.getAnotherUser() != null){
			s = (apost.getCreator().toString() + " to " + apost.getAgroup().getName());	
		}
		else {
			
			JOptionPane.showMessageDialog(null,"","Warning",JOptionPane.WARNING_MESSAGE);
		}
			
		initComponents(s);
		postText.setText(apost.getPostText());
		
		
		
		
		
		
		
		
	}
	
	
	
	class likeButtonListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{	
			apost.addLike(activeUser);
		}
	}
	
	class commentButtonListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{	
			DataBase.createReply(activeUser, apost);
		}
	}

}
